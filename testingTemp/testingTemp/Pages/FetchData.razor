@page "/fetchdata"

@using EndToEnd.Data
@using EndToEndDB.Data.EndToEnd
@inject AuthenticationStateProvider Auth

@inherits OwningComponentBase<WeatherForecastService>

<h1>Weather forecast</h1>
<!--AuthoriseView allows us to only show sections of the page-->
<!--based on the security on the current user-->
<AuthorizeView>
    <Authorized>
        <h4>Hello, @context.User.Identity.Name</h4>

        @if (forecasts == null)
        {
            <!--Show this if the current user has no data-->
            <p><em>Loading...</em></p>
        }
        else
        {
            <!--Show the forecasts for the current user-->
            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Temp. (C)</th>
                        <th>Temp. (F)</th>
                        <th>Summary</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in forecasts)
                    {
                        <tr>
                            <td>@forecast.Date.Value.ToShortDateString()</td>
                            <td>@forecast.TemperatureC</td>
                            <td>@forecast.TemperatureF</td>
                            <td>@forecast.Summary</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </Authorized>
    <!--Show this section if ther user is not logged in-->
    <NotAuthorized>
        <p>You're not signed in.</p>
    </NotAuthorized>
</AuthorizeView>

@code {


    //AuthenticationState is available as a CascadingParameter
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    List<WeatherForecast> forecasts;

    protected override async Task OnInitializedAsync()
    {
        //Get the current user
        var user = (await authenticationStateTask).User;
        //Get the forecasts for the current user
        //We access WeatherForecastService using @Service
        forecasts = await @Service.GetForecastsAsync(user.Identity.Name); 
    }
}
